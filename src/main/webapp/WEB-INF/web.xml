<?xml version="1.0" encoding="UTF-8"?>
  <web-app xmlns="http://java.sun.com/xml/ns/javaee"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
		  http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
           version="3.0">

    <!-- Web容器加载顺序ServletContext-context-param-listener-filter-servlet -->
    <!-- 指定Spring的配置文件 -->
    <!-- 否则Spring会默认从WEB-INF下寻找配置文件,contextConfigLocation属性是Spring内部固定的 -->
    <!-- 通过ContextLoaderListener的父类ContextLoader的第120行发现CONFIG_LOCATION_PARAM固定为contextConfigLocation -->

    <context-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>
        classpath:spring/spring-*.xml,
        classpath:spring/spring.xml
        <!--classpath:shiro/shiro.xml-->
      </param-value>
    </context-param>

    <context-param>
      <param-name>webAppRootKey</param-name>
      <param-value>ari.root</param-value>
    </context-param>


    <!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->
    <listener>
      <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <!-- 实例化Spring容器 -->
    <!-- 应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml -->
    <!-- WebApplicationContextUtils.getWebApplicationContext() -->
    <listener>
      <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>


    <!-- 解决乱码问题 -->
    <!-- forceEncoding默认为false,此时效果可大致理解为request.setCharacterEncoding("UTF-8") -->
    <!-- forceEncoding=true后,可大致理解为request.setCharacterEncoding("UTF-8")和response.setCharacterEncoding("UTF-8") -->

    <filter>
      <filter-name>SpringEncodingFilter</filter-name>
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      <init-param>
        <param-name>encoding</param-name>
        <param-value>UTF-8</param-value>
      </init-param>
      <init-param>
        <param-name>forceEncoding</param-name>
        <param-value>true</param-value>
      </init-param>
    </filter>
    <filter-mapping>
      <filter-name>SpringEncodingFilter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->
    <!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->
    <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->
    <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->
    <!--<filter>-->
      <!--<filter-name>shiroFilter</filter-name>-->
      <!--<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
      <!--<init-param>-->
        <!--&lt;!&ndash; 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 &ndash;&gt;-->
        <!--<param-name>targetFilterLifecycle</param-name>-->
        <!--<param-value>true</param-value>-->
      <!--</init-param>-->
    <!--</filter>-->
    <!--<filter-mapping>-->
      <!--<filter-name>shiroFilter</filter-name>-->
      <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!-- SpringMVC核心分发器 -->
    <servlet>
      <servlet-name>ariDispatcherServlet</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring/spring-mvc.xml</param-value>
      </init-param>
      <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
      <servlet-name>ariDispatcherServlet</servlet-name>
      <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!-- Session超时30分钟(零或负数表示会话永不超时) -->
    <!--
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>
     -->

    <!-- 默认欢迎页 -->
    <!-- Servlet2.5中可直接在此处执行Servlet应用,如<welcome-file>servlet/InitSystemParamServlet</welcome-file> -->
    <!-- 这里使用了SpringMVC提供的<mvc:view-controller>标签,实现了首页隐藏的目的,详见applicationContext.xml -->
    <!--
    <welcome-file-list>
        <welcome-file>login.jsp</welcome-file>
    </welcome-file-list>
     -->
    <welcome-file-list>
      <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>


    <!--<error-page>-->
    <!--<error-code>401</error-code>-->
    <!--<location>/WEB-INF/jsp/401.jsp</location>-->
    <!--</error-page>-->
    <!--<error-page>-->
    <!--<error-code>403</error-code>-->
    <!--<location>/WEB-INF/jsp/403.jsp</location>-->
    <!--</error-page>-->
    <!--<error-page>-->
    <!--<error-code>405</error-code>-->
    <!--<location>/WEB-INF/405.html</location>-->
    <!--</error-page>-->
    <!--<error-page>-->
    <!--<error-code>500</error-code>-->
    <!--<location>/WEB-INF/jsp/500.jsp</location>-->
    <!--</error-page>-->
    <!--<error-page>-->
    <!--<exception-type>java.lang.Throwable</exception-type>-->
    <!--<location>/WEB-INF/jsp/500.jsp</location>-->
    <!--</error-page>-->


    <context-param>
      <param-name>logbackConfigLocation</param-name>
      <param-value>classpath:logback.xml</param-value>
    </context-param>
    <listener>
      <listener-class>ch.qos.logback.ext.spring.web.LogbackConfigListener</listener-class>
    </listener>


    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.png</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.css</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.html</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.woff</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.woff2</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.ttf</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.xls</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.map</url-pattern>
    </servlet-mapping>

  <display-name>Archetype Created Web Application</display-name>
</web-app>

